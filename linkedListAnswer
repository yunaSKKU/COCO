
class sNode:
    def __init__(self,item):
        self.item=item #data field
        self.next=None #link field  (처음에 등장하는 노드는 다음 연결자가 없는 하나짜리)
    def set_item(self,new_item):
        self.item=new_item
    def set_next(self,new_next):
        self.next=new_next
    def get_item(self):
        return self.item
    def get_next(self):
        return self.next

class LinkedList:
    def __init__(self):
        self.head=None  #전체 리스트에 대해서 초기화해주기
    def is_empty(self):
        return self.head==None
    def add(self,item):  #리스트의 첫번째 자리로 item 배치
        temp=sNode(item)  #내용물 item을 담은 노드, temp
        temp.set_next(self.head)
        self.head=temp
    def size(self): #리스트 traversal
        current=self.head #현재의 위치를 current라 명명
        count=0
        while current!=None:
            count+=1
            current=current.get_next()
        return count
    def search(self,item):  #또 traversal? 찾고자 하는 item이 있는지 없는지 여부 체크
        current=self.head
        found=False 
        while current!=None and found!=True:
            if (current.get_item()==item):
                found=True
            else:
                current=current.get_next()
        return found
    def delete(self,item):  #역시 traversal 해야겠지?
        current=self.head
        found=False
        previous=None  #delete 대상의 이전 노드가 delete 대상 다음 노드와 연결되어야 하므로
        while not found:
            if (current.get_item()==item):
                found=True
            else:
                previous=current
                current=current.get_next()
        if previous==None: #맨 첫번째 노드의 삭제, 삭제하고자 하는 item이 첫번째 노드였음
            self.head=current.get_next()
        else:
            previous.set_next(current.get_next())
    def append(self,item): #연결리스트의 가장 끝부분에 추가, traversal 고려
        temp=sNode(item)
        current=self.head
        while current.get_next()!=None:
            current=current.get_next()
        #이 지점에 왔으면 마지막 노드겠지?
        current.set_next(temp)
    def printElement(self):
        current=self.head
        while current:
            if current.get_next()!=None:
                print(current.get_item(),'->',end=' ')
            else:
                print(current.get_item())
            current=current.get_next()

#main 함수-singly linked list 직접 확인해보기
s=LinkedList()
print(s.is_empty())
print(s.size())
s.add(1)
s.printElement() #1
s.add(2)
s.append(3)
s.printElement() #2->1->3
s.delete(3)
s.printElement() #2->1
print(s.search(4))  #False


